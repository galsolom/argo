repo:
  url: &url https://github.com/galsolom/argo
  targetRevision: main

argo-cd:
  server:
    initContainers:
    - name: download-tools
      image: alpine:3.8
      command: [sh, -c]
      args:
        - wget -qO /custom-tools/argo-cd-helmfile.sh https://raw.githubusercontent.com/travisghansen/argo-cd-helmfile/master/src/argo-cd-helmfile.sh &&
          chmod +x /custom-tools/argo-cd-helmfile.sh &&
          wget -qO /custom-tools/helmfile https://github.com/roboll/helmfile/releases/download/v0.138.7/helmfile_linux_amd64 &&
          chmod +x /custom-tools/helmfile
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    volumeMounts:
      - mountPath: /usr/local/bin/argo-cd-helmfile.sh
        name: custom-tools
        subPath: argo-cd-helmfile.sh
      - mountPath: /usr/local/bin/helmfile
        name: custom-tools
        subPath: helmfile
    volumes: 
      - name: custom-tools
        emptyDir: {}
    
    configEnabled: true
    # -- [General Argo CD configuration]
    # @default -- See [values.yaml]
    config:
      # Argo CD's externally facing base URL (optional). Required when configuring SSO
      url: ""
      configManagementPlugins: |
        - name: helmfile
          init:                          
            command: ["argo-cd-helmfile.sh"]
            args: ["init"]
          generate:                      
            command: ["argo-cd-helmfile.sh"]
            args: ["generate"]
      # Argo CD instance label key
      application.instanceLabelKey: argocd.argoproj.io/instance
      users.anonymous.enabled: "true"
    

    extraArgs: 
    - --insecure

    ingress:
      enabled: true
      ingressClassName: "nginx"
      hosts:
        - argocd.happyhippo.local
      paths:
        - /
      pathType: Prefix
      extraPaths: []
      tls:
        - secretName: happyhippo-local-tls
          hosts:
            - argocd.happyhippo.local

    metrics:
      enabled: true
      service:
        annotations: {}
        labels: 
          release: prometheus
        servicePort: 8083
      serviceMonitor:
        enabled: true
        interval: 30s
        additionalLabels: 
          release: prometheus
    


  controller:
    initContainers:
    - name: download-tools
      image: alpine:3.8
      command: [sh, -c]
      args:
        - wget -qO /custom-tools/argo-cd-helmfile.sh https://raw.githubusercontent.com/travisghansen/argo-cd-helmfile/master/src/argo-cd-helmfile.sh &&
          chmod +x /custom-tools/argo-cd-helmfile.sh &&
          wget -qO /custom-tools/helmfile https://github.com/roboll/helmfile/releases/download/v0.138.7/helmfile_linux_amd64 &&
          chmod +x /custom-tools/helmfile
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    volumeMounts:
      - mountPath: /usr/local/bin/argo-cd-helmfile.sh
        name: custom-tools
        subPath: argo-cd-helmfile.sh
      - mountPath: /usr/local/bin/helmfile
        name: custom-tools
        subPath: helmfile
    volumes: 
      - name: custom-tools
        emptyDir: {}
    metrics:
      enabled: true
      applicationLabels:
        # -- Enables additional labels in argocd_app_labels metric
        enabled: false
        # -- Additional labels
        labels: {}
      service:
        # -- Metrics service annotations
        annotations: {}
        # -- Metrics service labels
        labels: 
          release: prometheus
        # -- Metrics service port
        servicePort: 8082
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        # -- Prometheus ServiceMonitor interval
        interval: 30s
        # -- Prometheus [RelabelConfigs] to apply to samples before scraping
        relabelings: []
        # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
        metricRelabelings: []
        # -- Prometheus ServiceMonitor selector
        selector: {}
          # prometheus: kube-prometheus

        # -- Prometheus ServiceMonitor namespace
        namespace: "" # "monitoring"
        # -- Prometheus ServiceMonitor labels
        additionalLabels:
          release: prometheus
      rules:
        # -- Deploy a PrometheusRule for the application controller
        enabled: true
        # -- PrometheusRule.Spec for the application controller
        spec: 
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[ArgoCD] No reported applications"
            description: >
              ArgoCD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
              The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.
        selector:
          prometheus: kube-prometheus
        namespace: prometheus

  config:
    configManagementPlugins: |
      - name: helmfile
        init:                          
          command: ["argo-cd-helmfile.sh"]
          args: ["init"]
        generate:                      
          command: ["argo-cd-helmfile.sh"]
          args: ["generate"]
  configs:
    repositories: 
      repo:
        url: *url
  
